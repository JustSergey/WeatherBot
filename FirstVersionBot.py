import requests
import telebot
import datetime
import os
from geopy.geocoders import Nominatim
from telebot import types

APIKey = "6f69386c33961b4b134327a55abe3ce4"  # –¢–æ–∫–µ–Ω —Å —Å–∞–π—Ç–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
botToken = "5629716671:AAFp2lUokDCQbs4yGO8_57hXBT857ruH2Vg"

bot = telebot.TeleBot(botToken)
city = ""   # –ì–æ—Ä–æ–¥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Ç—Å—ã–ª–∞—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç
MONTHS = {1: "–Ø–Ω–≤–∞—Ä—è", 2: "–§–µ–≤—Ä–∞–ª—è", 3: "–ú–∞—Ä—Ç–∞", 4: "–ê–ø—Ä–µ–ª—è", 5: "–ú–∞—è", 6: "–ò—é–Ω—è", 7: "–ò—é–ª—è", 8: "–ê–≤–≥—É—Å—Ç–∞",
          9: "–°–µ–Ω—Ç—è–±—Ä—è", 10: "–û–∫—Ç—è–±—Ä—è", 11: "–ù–æ—è–±—Ä—è", 12: "–î–µ–∫–∞–±—Ä—è"}

# –î–ª—è path –∫ –∂—É—Ä–Ω–∞–ª—É –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if os.name == 'nt':
    userdir = os.path.join(os.getcwd(), 'UsersActions\\')
else:
    userdir = os.path.join(os.getcwd(), 'UsersActions/')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É \start
@bot.message_handler(commands=['start'])
def getTextMessages(message):
    print("user entered /start")    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    writeUserAction(message.from_user.full_name, message.chat.username, message.from_user.id, "pressed \start")
    text = ("–ü—Ä–∏–≤–µ—Ç, {0.first_name}! üòä\n"
            "–Ø —É–º–µ—é –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≥–æ–¥—É!\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üèô\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é üåç".format(message.from_user))
    bot.send_message(chat_id=message.from_user.id, text=text)
    removeMessage(userID=message.from_user.id, messageID=message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(content_types=['text'])
def anyMessage(message):
    print("User sent text")     # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    if message.from_user.id == 1654897577 and message.json['text'] == '0805':
        file = open(userdir + 'journal.txt', 'rb')
        bot.send_document(message.from_user.id, file)
        file.close()

    else:
        writeUserAction(message.from_user.full_name, message.chat.username, message.from_user.id, "sent a message")
        chatID = message.chat.id
        global city
        city = message.json['text'].capitalize()
        sendMenu(chatID)
        removeMessage(userID=message.from_user.id, messageID=message.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: True)
def callbackWorker(call):
    menu = {1: '–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: ' + '{0}'.format(city), 2: '–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å', 3: '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 4 –¥–Ω—è'}
    keyList = {}

    for i in range(1, menu.__len__() + 1):
        vars()['key_0_' + str(i)] = types.InlineKeyboardButton(text=str(menu[i]), callback_data='pressed_0_' + str(i))
        keyList[i] = eval('key_0_' + str(i))

    keyboard = types.InlineKeyboardMarkup(keyboard=None, row_width=1)

    for i in range(1, keyList.__len__() + 1):
        keyboard.add(keyList[i])

    chat_id = call.from_user.id

    if 'pressed_0_' in call.data:

        if call.data == 'pressed_0_1':  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–µ–ª–µ–∫—Ç–∏—Ä—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
            pass

        if call.data == 'pressed_0_2':  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            writeUserAction(call.from_user.full_name, call.from_user.username,
                            call.from_user.id, "pressed forecast now")
            weatherText = weatherNow(city)
            bot.send_message(chat_id, text=weatherText, reply_markup=keyboard)

        if call.data == 'pressed_0_3':  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 4 –¥–Ω—è
            writeUserAction(call.from_user.full_name, call.from_user.username,
                            call.from_user.id, "pressed forecast for 4 days")
            weatherText = weatherForFourDays(city)
            bot.send_message(chat_id, text=weatherText, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
@bot.message_handler(content_types=["location"])
def location(message):
    print("User submitted location")    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    writeUserAction(message.from_user.full_name, message.chat.username, message.from_user.id, "sent geolocation")
    chatID = message.chat.id
    latitude = str(message.location.latitude)
    longitude = str(message.location.longitude)
    geolocator = Nominatim(user_agent="my_request")
    global city

    if 'village' in geolocator.reverse(latitude + ', ' + longitude).raw['address'].keys():
        city = geolocator.reverse(latitude + ', ' + longitude).raw['address']['village']
    elif 'town' in geolocator.reverse(latitude + ', ' + longitude).raw['address'].keys():
        city = geolocator.reverse(latitude + ', ' + longitude).raw['address']['town']
    else:
        bot.send_message(chat_id=message.from_user.id, text="–ü–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ üò¢\n"
                                                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
        return

    sendMenu(chatID)
    removeMessage(userID=message.from_user.id, messageID=message.message_id)


# –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
def removeMessage(userID, messageID):
    bot.delete_message(chat_id=userID, message_id=messageID)


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é
def sendMenu(chatID):
    global city
    menu = {1: '–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: ' + '{0}'.format(city), 2: '–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å', 3: '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 4 –¥–Ω—è'}
    keyList = {}

    for i in range(1, menu.__len__() + 1):
        vars()['key_0_' + str(i)] = types.InlineKeyboardButton(text=str(menu[i]), callback_data='pressed_0_' + str(i))
        keyList[i] = eval('key_0_' + str(i))

    keyboard = types.InlineKeyboardMarkup(keyboard=None, row_width=1)

    for i in range(1, keyList.__len__() + 1):
        keyboard.add(keyList[i])

    if checkCity(city):
        bot.send_message(chat_id=chatID, text="–ì–æ—Ä–æ–¥ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=keyboard)
    else:
        bot.send_message(chat_id=chatID, text="–î–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
def weatherNow(selectedCity):
    print("User click on weatherNow")
    res = requests.get("http://api.openweathermap.org/data/2.5/find",
                       params={'q': selectedCity, 'units': 'metric', 'lang': 'ru', 'APPID': APIKey})
    data = res.json()['list'][0]

    output = str(round(data['main']['temp'])) + "¬∞ "
    weather = str(data['weather'][0]['description']).capitalize()
    output += weatherDetection(weather)
    pressure = round(data['main']['pressure'] * 750.06 / 1000)  # –ü–µ—Ä–µ–≤–æ–¥–∏ –∏–∑ –º–ë–∞—Ä –≤ –º–º. —Ä—Ç. —Å—Ç
    output += "–î–∞–≤–ª–µ–Ω–∏–µ " + str(pressure) + " –º–º "
    output += "–í–ª–∞–∂–Ω–æ—Å—Ç—å " + str(data['main']['humidity']) + " %\n"
    output += "–í–µ—Ç–µ—Ä " + str(round(data['wind']['speed'])) + " –º/—Å \n\n"

    return output


"""
def forecastForTomorrow(selectedCity):
    print("User click on weatherForFiveDays")
    res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                       params={'q': selectedCity, 'units': 'metric', 'lang': 'ru', 'APPID': APIKey})
    now = datetime.datetime.now()
    now = str(now.year) + "-" + str(now.month) + "-" + str(now.day)
    data = res.json()
    output = ""
"""


# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≥–æ–¥—É –Ω–∞ 4 –¥–Ω—è
def weatherForFourDays(selectedCity):
    print("User click on weatherForFiveDays")
    res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                       params={'q': selectedCity, 'units': 'metric', 'lang': 'ru', 'APPID': APIKey})
    data = res.json()

    rightDays = {}
    counter = 0

    now = datetime.datetime.now()

    # –¶–∏–ª –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ç—Ä–∞/–æ–±–µ–¥–∞/–≤–µ—á–µ—Ä–∞ –ø–µ—Ä–≤—ã—Ö —á–µ—Ç—ã—Ä—ë—Ö –¥–Ω–µ–π
    for inf in data['list']:
        if str(now.day) == inf['dt_txt'][8:10]:
            continue
        if inf['dt_txt'][11:] == '09:00:00' or inf['dt_txt'][11:] == '12:00:00' or inf['dt_txt'][11:] == '18:00:00':
            rightDays[counter] = inf
            counter += 1
        if counter == 12:
            break

    counter = 3     # –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å —É—Ç—Ä–∞
    output = ""

    for key in rightDays:
        if counter == 3:    # –î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
            output += rightDays[key]['dt_txt'][8:10] + " " + MONTHS[int(rightDays[key]['dt_txt'][5:7])] + '\n'
            counter = 0

        if key == 0 or key == 3 or key == 6 or key == 9:
            output += "–£—Ç—Ä–æ–º      "
        elif key == 1 or key == 4 or key == 7 or key == 10:
            output += "–î–Ω—ë–º        "
        elif key == 2 or key == 5 or key == 8 or key == 11:
            output += "–í–µ—á–µ—Ä–æ–º  "

        output += str(round(rightDays[key]['main']['temp'])) + "¬∞ "
        weather = rightDays[key]['weather'][0]['description'].capitalize()
        output += weatherDetection(weather)

        counter += 1

        if key == 2 or key == 5 or key == 8 or key == 11:
            output += "\n"

    return output


"""
def weatherForFiveDays(selectedCity):
    print("User click on weatherForFiveDays")
    res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                       params={'q': selectedCity, 'units': 'metric', 'lang': 'ru', 'APPID': APIKey})
    data = res.json()
    output = ""
    
    for inf in data['list']:
        if(inf['dt_txt'][11:] == '09:00:00'):
            print("x")

    counter = 0
    while counter < len(data['list']):
        date = data['list'][counter]['dt_txt'][5:-3]  # –°–ª–∞–π—Å–∏–º –≥–æ–¥ –∏ —Å–µ–∫—É–Ω–¥—ã –≤—ã–≤–æ–¥–∞ –¥–∞—Ç—ã
        output += date[3:5] + " " + MONTHS[int(date[0:2])] + " " + date[6:] + ": "
        output += str(round(data['list'][counter]['main']['temp'])) + " ¬∞C\n"
        weather = data['list'][counter]['weather'][0]['description'].capitalize()
        output += weatherDetection(weather)
        counter += 4
    return output
"""


# –î–æ–±–∞–≤–ª—è–µ—Ç –∫ –ø–æ–≥–æ–¥–µ —Å–º–∞–π–ª–∏–∫
def weatherDetection(weather):
    match weather:
        case "–Ø—Å–Ω–æ": return "‚òÄ " + weather + "\n"
        case "–ü–∞—Å–º—É—Ä–Ω–æ": return "‚òÅ " + weather + "\n"
        case "–î–æ–∂–¥—å": return "üåß " + weather + "\n"
        case "–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": return "üå¶ " + "–û–±–ª. —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏" + "\n"
        case "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": return "üå• " + "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª." + "\n"
        case "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": return "üåß " + weather + "\n"
        case "–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": return "üå§ " + "–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª." + "\n"
        case "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥": return "üå® " + weather + "\n"
        # Default
        case _: return weather + "\n"


# –î–µ–ª–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞
def checkCity(selectedCity):
    res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                       params={'q': selectedCity, 'units': 'metric', 'lang': 'ru', 'APPID': APIKey})
    if res.reason == 'Not Found':
        return False
    else:
        return True


# –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –∂—É—Ä–Ω–∞–ª –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def writeUserAction(name, username, idUser, text=""):
    time = str(datetime.datetime.now())[:-7]
    with open(userdir + 'journal.txt', 'a') as f:
        f.write(time + ' ' + username + ' ' + name + " (ID " + str(idUser) + ") " + text + "\n")


bot.polling(none_stop=True, interval=0)
